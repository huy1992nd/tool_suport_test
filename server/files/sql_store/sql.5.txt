-- Begin: calculate_nop_v2
-- Tinh NOP, Realized, Unrealized theo file Excel cua HoatVT

CREATE PROCEDURE calculate_nop_v2(IN symbol VARCHAR(20), IN isB2C TINYINT, IN endTime VARCHAR(30), IN isNewNOP TINYINT, IN fairvalue DOUBLE) DETERMINISTIC
BEGIN
	-- Khai bao hang
	DECLARE EPSILON DOUBLE DEFAULT 1E-09;
	
	-- Khai bao truong du lieu
	DECLARE executionId VARCHAR(30) DEFAULT "";
	DECLARE currentPairCd VARCHAR(20) DEFAULT "";
	DECLARE vSide VARCHAR(1) DEFAULT "";
	DECLARE filledQuantity DOUBLE DEFAULT 0;
	DECLARE executionPrice DOUBLE DEFAULT 0;
	DECLARE executionDt VARCHAR(30) DEFAULT "";
	DECLARE exeType VARCHAR(20) DEFAULT "";
	
	-- Khai bao bien su dung de tinh toan NOP
	DECLARE customerBuyNOP DOUBLE DEFAULT 0;
	DECLARE customerSellNOP DOUBLE DEFAULT 0;
	DECLARE coverBuyNOP DOUBLE DEFAULT 0;
	DECLARE coverSellNOP DOUBLE DEFAULT 0;
	DECLARE coverNOP DOUBLE DEFAULT 0;
	DECLARE customerNOP DOUBLE DEFAULT 0;
	DECLARE NOP DOUBLE DEFAULT 0;
	DECLARE extraBalance DOUBLE DEFAULT 0;
	
	-- Khai bao bien su dung de tinh Realized, Unrealized
	DECLARE totalBuy DOUBLE DEFAULT 0;
	DECLARE totalbuyMax DOUBLE DEFAULT 0;
	DECLARE totalBuyAmount DOUBLE DEFAULT 0;
	DECLARE totalBuyAmountMax DOUBLE DEFAULT 0;
	DECLARE totalSell DOUBLE DEFAULT 0;
	DECLARE totalSellMax DOUBLE DEFAULT 0;
	DECLARE totalSellAmount DOUBLE DEFAULT 0;
	DECLARE totalSellAmountMax DOUBLE DEFAULT 0;
	DECLARE totalBuyAmountR DOUBLE DEFAULT 0;
	DECLARE totalSellAmountR DOUBLE DEFAULT 0;
	DECLARE realized DOUBLE DEFAULT 0;
	DECLARE unrealized DOUBLE DEFAULT 0;
	
	-- Su dung de truy van
    DECLARE nopSQL TEXT DEFAULT "";
	DECLARE isFinished INTEGER DEFAULT 0;
	DEClARE cursorNOP CURSOR FOR SELECT execution_id, currency_pair_cd, side, filled_quantity, execution_price, execution_dt, type FROM view_nop ORDER BY execution_dt,execution_id;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET isFinished = 1;

	-- Tao lenh SQL sinh view chua du lieu
	CALL generate_nop_sql_v2(symbol, isB2C, endTime, nopSQL);
	SET @nopSQL = CONCAT("CREATE VIEW view_nop AS ", nopSQL);
	-- SELECT CONCAT('SQL: ', nopSQL);
	
	-- Tao view chua du lieu can tinh
	DROP VIEW IF EXISTS view_nop;
	PREPARE stmt FROM @nopSQL;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;

	-- Duyet lan 1: Tinh toan tong max cua (buy, sell, buy amount, sell amount)
	OPEN cursorNOP;
	get_execution: LOOP
		FETCH cursorNOP INTO executionId, currentPairCd, vSide, filledQuantity, executionPrice, executionDt, exeType;
		IF isFinished = 1 THEN 
			LEAVE get_execution;
		END IF;

		IF exeType = "cover" THEN
			IF vSide = '1' THEN
				SET coverSellNOP = coverSellNOP + filledQuantity;
			ELSE
				SET coverBuyNOP = coverBuyNOP + filledQuantity;
			END IF;
		ELSE
			IF vSide = '1' THEN
				SET customerSellNOP = customerSellNOP + filledQuantity;
			ELSE
				SET customerBuyNOP = customerBuyNOP + filledQuantity;
			END IF;
		END IF;
		
		IF vSide = '1' THEN
			SET totalSell = totalSell + filledQuantity;
			SET totalSellAmount = totalSellAmount + filledQuantity*executionPrice;
		ELSE
			SET totalBuy = totalBuy + filledQuantity;
			SET totalBuyAmount = totalBuyAmount + filledQuantity*executionPrice;
		END IF;
	END LOOP get_execution;
	CLOSE cursorNOP;
	SET totalbuyMax = totalBuy;
	SET totalBuyAmountMax = totalBuyAmount;
	SET totalSellMax = totalSell;
	SET totalSellAmountMax = totalSellAmount;
	
	-- Duyet lan 2: Tinh totalBuyAmountR, totalSellAmountR
	SET totalSell = 0;
	SET totalSellAmount = 0;
	SET totalBuy = 0;
	SET totalBuyAmount = 0;
	SET totalBuyAmountR = 0;
	SET totalSellAmountR = 0;
	SET isFinished = 0;
	OPEN cursorNOP;
	get_execution: LOOP
		FETCH cursorNOP INTO executionId, currentPairCd, vSide, filledQuantity, executionPrice, executionDt, exeType;
		IF isFinished = 1 THEN 
			LEAVE get_execution;
		END IF;

		IF vSide = '1' THEN
			SET totalSell = totalSell + filledQuantity;
			SET totalSellAmount = totalSellAmount + filledQuantity*executionPrice;
		ELSE
			SET totalBuy = totalBuy + filledQuantity;
			SET totalBuyAmount = totalBuyAmount + filledQuantity*executionPrice;
		END IF;
		
		IF totalBuy>=totalSellMax THEN
			SET totalBuyAmountR = totalBuyAmount - (totalBuy-totalSellMax)*executionPrice;
		END IF;
		IF totalSell>=totalBuyMax THEN
			SET totalSellAmountR = totalSellAmount - (totalSell-totalBuyMax)*executionPrice;
		END IF;
		IF ABS(totalBuyAmountR)>EPSILON OR ABS(totalSellAmountR)>EPSILON THEN
			LEAVE get_execution;
		END IF;
	END LOOP get_execution;
	CLOSE cursorNOP;
	
	-- Tinh toan NOP
	SET customerSellNOP = IF(customerSellNOP>0, -customerSellNOP, 0);
	SET customerNOP = customerBuyNOP + customerSellNOP;
	SET coverSellNOP = IF(coverSellNOP>0, -coverSellNOP, 0);
	SET coverNOP = coverBuyNOP + coverSellNOP;
	SET NOP = customerNOP + coverNOP;
	
	-- Tinh toan Markup
	CALL calculate_markup_v2(symbol, endTime, @markupCommission, @markupLots);
	
	-- Tinh Realized, Unrealized
	IF ABS(totalBuyAmountR)>EPSILON THEN
		SET realized = totalSellAmountMax - totalBuyAmountR;
	ELSEIF ABS(totalSellAmountR)>EPSILON THEN
		SET realized = totalSellAmountR - totalBuyAmountMax;
	END IF;
	SET unrealized = totalSellAmountMax - totalBuyAmountMax - realized + NOP*fairvalue;
	
	-- Tinh them Extra NOP
	SET extraBalance = (totalSellAmountMax - totalBuyAmountMax);
    
	IF isNewNOP<>0 THEN
		INSERT INTO `tmp_nop_v2` (
			`symbol`, `customer_buy`, `customer_sell`, `customer_nop`, `cover_buy`, 
			`cover_sell`, `cover_nop`, `commission`, `markup_lots`, `nop`,
			`realized`, `unrealized`, `extra_balance`, `balance`,
			`order_cover_buy_expense`, `order_cover_sell_expense`
		) SELECT
			symbol AS `symbol`, customerBuyNOP AS `customer_buy`, customerSellNOP AS `customer_sell`, customerNOP AS `customer_nop`, coverBuyNOP AS `cover_buy`,
			coverSellNOP AS `cover_sell`, coverNOP AS `cover_nop`, @markupCommission AS `commission`, @markupLots AS `markup_lots`, NOP AS `nop`,
			(realized-@markupCommission) AS `realized`, unrealized AS `unrealized`, extraBalance AS `extra_balance`, extraBalance + (unrealized+realized-@markupCommission) AS `balance`,
			totalBuyAmountMax AS `order_cover_buy_expense`, totalSellAmountMax AS `order_cover_sell_expense`;
	ELSE
		INSERT INTO `tmp_nop_v2` (
			`symbol`, `customer_buy`, `customer_sell`, `customer_nop`, `cover_buy`, 
			`cover_sell`, `cover_nop`, `commission`, `markup_lots`, `nop`,
			`realized`, `unrealized`, `extra_balance`, `balance`,
			`order_cover_buy_expense`, `order_cover_sell_expense`
		) SELECT
			symbol AS `symbol`, customerBuyNOP AS `customer_buy`, customerSellNOP AS `customer_sell`, customerNOP AS `customer_nop`, coverBuyNOP AS `cover_buy`,
			coverSellNOP AS `cover_sell`, coverNOP AS `cover_nop`, @markupCommission AS `commission`, @markupLots AS `markup_lots`, NOP AS `nop`,
			(realized-@markupCommission) AS `realized`, unrealized AS `unrealized`, 0 AS `extra_balance`, (unrealized+realized-@markupCommission) AS `balance`,
			totalBuyAmountMax AS `order_cover_buy_expense`, totalSellAmountMax AS `order_cover_sell_expense`;
	END IF;
	
	SELECT * FROM tmp_nop_v2 WHERE id=LAST_INSERT_ID();
